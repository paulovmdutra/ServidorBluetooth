//---------------------------------------------------------------------------


#pragma hdrstop

#include "UBTService.h"
#include "USdtfx.h"
#include "UTThreadServer.h"

using namespace std;


	ULONG              ulRetCode = 0;
	int                iAddrLen = sizeof(SOCKADDR_BTH), iCxnCount = 0, iLengthReceived = 0, iTotalLengthReceived = 0;
	char               szDataBuffer[CXN_TRANSFER_DATA_LENGTH] = {0};
	char *             pszDataBufferIndex = NULL;
	LPTSTR             lptstrThisComputerName = NULL;
	DWORD              dwLenComputerName = MAX_COMPUTERNAME_LENGTH + 1;
	SOCKET             LocalSocket = INVALID_SOCKET, ClientSocket = INVALID_SOCKET;
	WSAVERSION         wsaVersion = {0};

	/*
		 Essa estrutura fornece informações relevantes sobre um determinado serviço, incluindo
		 a identificação de classe de serviço, de serviço, aplicáveis nome do espaço de identificadores
		 de protocolo e informações, bem como um conjunto de endereços de transporte em que o serviço
		 scuta.
	*/
	WSAQUERYSET        wsaQuerySet = {0};


	SOCKADDR_BTH       SockAddrBthLocal = {0};
	LPCSADDR_INFO      lpCSAddrInfo = NULL;
	BOOL bContinue;
	int  iMaxCxnCycles = 1;

	struct sockaddr_in saClient;

	int iClientSize = sizeof(saClient);
	WSABUF  wsabuf;
	DWORD RecvBytes, Flags;
	unsigned long comprimento;
	unsigned long flags;

	 WSAOVERLAPPED RecvOverlapped;
	char buffer[DATA_BUFSIZE];

/* Define an example conditional function that depends on the pQos field */
int CALLBACK ConditionAcceptFunc(
	LPWSABUF lpCallerId,
	LPWSABUF lpCallerData,
	LPQOS pQos,
	LPQOS lpGQOS,
	LPWSABUF lpCalleeId,
	LPWSABUF lpCalleeData,
	GROUP FAR * g,
	DWORD_PTR dwCallbackData
	)
{

	if (pQos != NULL) {
		RtlZeroMemory(pQos, sizeof(QOS));
		return CF_ACCEPT;
	} else
		return CF_REJECT;
}

int build_uuid(GUID *uuid, char *service)
{

	char service_buf[37];

	if(service == NULL || strcmp(service, "0") == 0 || strlen(service) == 0) {
		// Use public browse group
		strcpy(service_buf, "00000000-0000-1000-8000-00805F9B34FB");
		service_buf[4] = '1';
		service_buf[5] = '0';
		service_buf[6] = '0';
		service_buf[7] = '2';
		str2uuid(service_buf, uuid);
	}

	// 128 bit
	else if(strlen(service) == 36) {
		if(service[8] != '-' || service[13] != '-' ||
		   service[18] != '-' || service[23] != '-' ) {
			return(-1);
		}
		str2uuid(service, uuid);
	}

	// they left 0x on?
	else if(strlen(service) == 6){
		if(service[0] == '0' && service[1] == 'x' || service[1] == 'X') {
			strcpy(service_buf, "00000000-0000-1000-8000-00805F9B34FB");
			service_buf[4] = service[2];
			service_buf[5] = service[3];
			service_buf[6] = service[4];
			service_buf[7] = service[5];
			str2uuid(service_buf, uuid);
		}

		else {
			return(-1);
		}
	}

	// 16 bit
	else if(strlen(service) == 4) {
		strcpy(service_buf, "00000000-0000-1000-8000-00805F9B34FB");
		service_buf[4] = service[0];
		service_buf[5] = service[1];
		service_buf[6] = service[2];
		service_buf[7] = service[3];
		str2uuid(service_buf, uuid);
	}

	else {
		return(-1);
	}

	return(0);
}

int str2uuid( const char *uuid_str, GUID *uuid )
{


	// Parse uuid128 standard format: 12345678-9012-3456-7890-123456789012
	int i;
	char buf[20] = { 0 };

	strncpy(buf, uuid_str, 8);
	uuid->Data1 = strtoul( buf, NULL, 16 );
	memset(buf, 0, sizeof(buf));

	strncpy(buf, uuid_str+9, 4);
	uuid->Data2 = (unsigned short) strtoul( buf, NULL, 16 );
	memset(buf, 0, sizeof(buf));

	strncpy(buf, uuid_str+14, 4);
	uuid->Data3 = (unsigned short) strtoul( buf, NULL, 16 );
	memset(buf, 0, sizeof(buf));

	strncpy(buf, uuid_str+19, 4);
	strncpy(buf+4, uuid_str+24, 12);
	for( i=0; i<8; i++ ) {
		char buf2[3] = { buf[2*i], buf[2*i+1], 0 };
		uuid->Data4[i] = (unsigned char)strtoul( buf2, NULL, 16 );
	}

	return 0;

}

BOOL BT_SetService()
{

   ULONG recordHandle = 0;

   ULONG ulSdpVersion = BTH_SDP_VERSION;

   BLOB blob;

   WSAQUERYSET Service;

   // Bluetooth device profile record sample

   BYTE rgbSdpRecord[] = {

		 0x35, 0x4d, 0x09, 0x00, 0x01, 0x35, 0x11, 0x1c,

		 0x29, 0xf9, 0xc0, 0xfd, 0xbb, 0x6e, 0x47, 0x97,

		 0x9f, 0xa9, 0x3e, 0xc9, 0xa8, 0x54, 0x29, 0x0c,

		 0x09, 0x00, 0x04, 0x35, 0x0c, 0x35, 0x03, 0x19,

		 0x01, 0x00, 0x35, 0x05, 0x19, 0x00, 0x03, 0x08,

		 0x1a, 0x09, 0x00, 0x06, 0x35, 0x09, 0x09, 0x65,

		 0x6e, 0x09, 0x00, 0x6a, 0x09, 0x01, 0x00, 0x09,

		 0x00, 0x09, 0x35, 0x08, 0x35, 0x06, 0x19, 0x11,

		 0x05, 0x09, 0x01, 0x00, 0x09, 0x01, 0x00, 0x25,

		 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c

   };

   bigBlob.b.pRecordHandle   = (HANDLE *)&recordHandle;

   bigBlob.b.pSdpVersion     = &ulSdpVersion;


   // bigBlob.b.fSecurity       = 0;

   // bigBlob.b.fOptions        = 0;

   bigBlob.b.ulRecordLength  = SDP_RECORD_SIZE;

   memcpy (bigBlob.b.pRecord, rgbSdpRecord, SDP_RECORD_SIZE);

   blob.cbSize    = sizeof(BTHNS_SETBLOB) + SDP_RECORD_SIZE - 1;

   blob.pBlobData = (PBYTE) &bigBlob;

   LPCSADDR_INFO      lpCSAddrInfo = NULL;

   memset (&Service, 0, sizeof(Service));


   Service.dwSize = sizeof(Service);
   Service.lpBlob = &blob;
   Service.lpszServiceInstanceName = L"BluetoothService";
   Service.lpszComment = L"BluetoothService";
   Service.dwNameSpace = NS_BTH;
   Service.lpServiceClassId = (LPGUID) &g_guidServiceClass;
   Service.dwNumberOfCsAddrs = 1;
   Service.lpcsaBuffer = lpCSAddrInfo; // Required.

   if (WSASetService(&Service,RNRSERVICE_REGISTER,0) == SOCKET_ERROR)
   {
		printf("WSASetService() failed with error code %d\n", WSAGetLastError ());
		return FALSE;
   }
   else
   {
	   printf("WSASetService() is working!\n");
	   return TRUE;
   }

}

int startService()
{
			Flags       =0;
	RecvBytes   =0;
	TThreadServer *threadServer = new TThreadServer(true);


	// Both of these fixed-size allocations can be on the stack
	if ( ( lpCSAddrInfo = (LPCSADDR_INFO) HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(CSADDR_INFO) ) ) == NULL)
	{
		printf("!ERROR! | Unable to allocate memory for CSADDR_INFO\n");
		ulRetCode = 1;
		closeConnection();
	}
	else
	   printf("HeapAlloc() for CSADDR_INFO (address) is OK!\n");


	if ( ( lptstrThisComputerName = (LPTSTR) HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, dwLenComputerName ) ) == NULL)
	{
		printf("!ERROR! | Unable to allocate memory for CSADDR_INFO\n");
		ulRetCode = 1;
		closeConnection();
	}
	else
		printf("HeapAlloc() for CSADDR_INFO (local computer name) is OK!\n");


	if ( !GetComputerName(lptstrThisComputerName, &dwLenComputerName) )
	{
		printf("=CRITICAL= | GetComputerName() call failed. WSAGetLastError=[%d]\n", WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}
	else
	{
		printf("GetComputerName() is pretty fine!\n");
		printf("Local computer name: %S\n", lptstrThisComputerName);

	}


	// Open a bluetooth socket using RFCOMM protocol
	printf("Opening local socket using socket()...\n");

	if ( ( LocalSocket = socket(AF_BTH, SOCK_STREAM, BTHPROTO_RFCOMM) ) == INVALID_SOCKET)
	{
		printf("=CRITICAL= | socket() call failed. WSAGetLastError = [%d]\n", WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}


	if ( (2 <= g_iOutputLevel) | (LocalSocket != INVALID_SOCKET))
	{
		printf("*INFO* | socket() call succeeded! Socket = [0x%X]\n", LocalSocket);
	}

	// Setting address family to AF_BTH indicates winsock2 to use Bluetooth port
	SockAddrBthLocal.addressFamily = AF_BTH;
	SockAddrBthLocal.port = BT_PORT_ANY; //1;



	// bind() associates a local address and port combination

	// with the socket just created. This is most useful when

	// the application is a server that has a well-known port

	// that clients know about in advance.
	printf("Preparando BIND\n\n");

	if ( bind(LocalSocket, (SOCKADDR*) &SockAddrBthLocal, sizeof(SockAddrBthLocal) )  == SOCKET_ERROR)
	{
		printf("=CRITICAL= | bind() call failed w/socket = [0x%X]. Error=[%d]\n", LocalSocket, WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}


	if ( (2 <= g_iOutputLevel) | (bind(LocalSocket, (struct sockaddr *) &SockAddrBthLocal, sizeof(SOCKADDR_BTH) )  != SOCKET_ERROR))
	{
		printf("*INFO* | bind() call succeeded!\n");
	}

	if  ( ( ulRetCode = getsockname(LocalSocket, (struct sockaddr *)&SockAddrBthLocal, &iAddrLen) ) == SOCKET_ERROR)
	{
		printf("=CRITICAL= | getsockname() call failed w/socket = [0x%X]. WSAGetLastError=[%d]\n", LocalSocket, WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}
	else
	{
		 printf("getsockname() is pretty fine!\n");
		 printf("Local address: 0x%x\n", SockAddrBthLocal.btAddr);

	 }


	// CSADDR_INFO
	lpCSAddrInfo[0].LocalAddr.iSockaddrLength = sizeof( SOCKADDR_BTH );
	lpCSAddrInfo[0].LocalAddr.lpSockaddr = (LPSOCKADDR)&SockAddrBthLocal;
	lpCSAddrInfo[0].RemoteAddr.iSockaddrLength = sizeof( SOCKADDR_BTH );
	lpCSAddrInfo[0].RemoteAddr.lpSockaddr = (LPSOCKADDR)&SockAddrBthLocal;
	lpCSAddrInfo[0].iSocketType = SOCK_STREAM;
	lpCSAddrInfo[0].iProtocol = BTHPROTO_RFCOMM;

	// If we got an address, go ahead and advertise it.
	ZeroMemory(&wsaQuerySet, sizeof(WSAQUERYSET));

	wsaQuerySet.dwSize = sizeof(WSAQUERYSET);
	wsaQuerySet.lpServiceClassId = (LPGUID) &g_guidServiceClass;

	// should be something like "Sample Bluetooth Server"
	wsaQuerySet.lpszServiceInstanceName = lptstrThisComputerName; //Nome do serviço
	wsaQuerySet.lpszComment = L"Example Service instance registered in the directory service through RnR";
	wsaQuerySet.dwNameSpace = NS_BTH;
	wsaQuerySet.dwNumberOfCsAddrs = 1;      // Must be 1.
	wsaQuerySet.lpcsaBuffer = lpCSAddrInfo; // Required.

	// As long as we use a blocking accept(), we will have a race
	// between advertising the service and actually being ready to
	// accept connections.  If we use non-blocking accept, advertise
	// the service after accept has been called.
	if ( WSASetService(&wsaQuerySet, RNRSERVICE_REGISTER, 0) == SOCKET_ERROR)
	{
		printf("=CRITICAL= | WSASetService() call failed. Error=[%d]\n", WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}
	else {
		printf("WSASetService() looks fine!\n");
	}


	// listen() call indicates winsock2 to listen on a given socket for any incoming connection.

	if ( listen(LocalSocket, SOMAXCONN) == SOCKET_ERROR)
	{
		printf("=CRITICAL= | listen() call failed w/socket = [0x%X]. Error=[%d]\n", LocalSocket, WSAGetLastError());
		ulRetCode = 1;
		closeConnection();
	}

	threadServer->setLocalSocket(LocalSocket);
	threadServer->Start();



	return ulRetCode;

}

void closeConnection()
{

		if ( INVALID_SOCKET != ClientSocket )
		{
			closesocket(ClientSocket);
			ClientSocket = INVALID_SOCKET;
		}

		if ( INVALID_SOCKET != LocalSocket )
		{
			closesocket(LocalSocket);
			LocalSocket = INVALID_SOCKET;
		}

		if ( NULL != lptstrThisComputerName )
		{
			HeapFree(GetProcessHeap(), 0, lptstrThisComputerName);
			lptstrThisComputerName = NULL;
		}

		if ( NULL != lpCSAddrInfo )
		{
			HeapFree(GetProcessHeap(), 0, lpCSAddrInfo);
			lpCSAddrInfo = NULL;

		}
}


int listenConn()
{
		SOCKET s;
		SOCKET s2;
	    SOCKADDR_BTH sab, sab2;


	    int ilen;

		s = socket (AF_BTH, SOCK_STREAM,  BTHPROTO_RFCOMM);

		if (s == INVALID_SOCKET)
		{
			wprintf (L"Socket creation failed, error %d\n", WSAGetLastError ());
			return 1;
		}

		memset (&sab, 0, sizeof(sab));
		sab.addressFamily = AF_BTH;
		sab.btAddr = 0;

		////sab.serviceClassId = FaxServiceClass_UUID;
		//sab.port =BT_PORT_ANY;

		if (0 != bind (s, (SOCKADDR *) &sab, sizeof(sab)))
		{
			wprintf (L"Socket bind, error %d\n", WSAGetLastError ());
			closesocket (s);
			return 1;
		}

		printf("Escutando a porta\n");

		listen (s, 5);

		for ( ; ; )
		{
				ilen = sizeof(sab2);
				s2 = accept (s, (SOCKADDR *)&sab2, &ilen);

				if (s2 == INVALID_SOCKET)
				{
					wprintf (L"Socket bind, error %d\n", WSAGetLastError ());
					break;
				}

				wprintf (L"Connection came from %04x%08x to channel %d\n",
							GET_NAP(sab2.btAddr), GET_SAP(sab2.btAddr), sab2.port);

			   // SpinConnectionThreadsOnSocket(s2);

		}

		closesocket (s);

		return 0;

}

//---------------------------------------------------------------------------

#pragma package(smart_init)
